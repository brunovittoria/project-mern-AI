Este projeto é feito utilizando a stack MERN + OPENAI, abaixo deixarei instrucoes do passo a passo GERAL para a construçao de um projeto do genero

PAREI NO 2:08 (Criaçao token)


__________________________________
*******STEP BY STEP BACKEND*******
__________________________________

MIDDLEWARES X CONTROLLERS
 os middlewares são funções que podem ser usadas em várias partes do aplicativo para realizar ações intermediárias, enquanto os controllers são responsáveis por manipular a lógica específica de uma rota ou recurso.

RODAR: npm run dev

1° Iniciaremos com a parte BACKEND

2° Copiamos os files deste GITHUB:https://github.com/Nikhilthadani/MERN-AI-ChatBot

3° C.L modificados nos SCRIPTS
 "scripts": {
    "dev": "concurrently \"npx tsc --watch\" \"nodemon -q dist/index.js\" ",
    "build": "tsc",
    "start": "node dist/index.js"
  },

4° Mudamos o tsconfig.json :   
"compilerOptions": 
    "module": "NodeNext",

5° Criamos file dist no SERVER

6° Rodamos o comando npm run dev, pausamos e rodamos denovo

7° Criei o GIT IGNORE

8° Linkei REP LOCAL + REMOTO

9° Criamos as pastas no SRC: config, controllers, models, routes, utils e database

10° Conectamos com o MONGODB

11° Criamos conta no OPENAI e conectamos ao nosso ENV e APP

12° Iremos criar uma autenticacao segura com JWT e COOKIES , rotas do back e controllers

13° Iremos criar os MODEL SCHEMAS DO DB

14° Criamos controllers para serem designados para cuidar das rotas

15° Testamos as rotas no THUNDERBOLT

16° Criando MIDDLEWARES: Funcoes executadas ANTES de uma REQ ser executada, 
no NODE pode ser usado para checar o JSON BODY, TOKENS, COOKIES, PARAMS e muito mais.E como se fosse um BODY GUARD que so deixa entrar dps das VERIFICACOES e no caso em que nao seja atendida a verificacao ira avisar para o FRONT oque precisa pra entrar na "festa". Para isso existe uma dependency express-validator. Iremos criar esses validator dentro UTILS

17° Apos fazer a parte da autenticacao e o user entrar no APP vamos fazer a parte de AUTHORIZATION(TOKEN|JWT) para que users tenham acesso as funcionalidades do APP. 

Vamos considerar um cenário comum de autenticação em uma aplicação web. Suponha que você tenha um sistema de login em uma aplicação onde os usuários podem se autenticar. Após a autenticação bem-sucedida, o servidor pode gerar um JWT e enviá-lo de volta para o cliente. Esse token pode então ser usado pelo cliente para autenticar-se em solicitações futuras sem a necessidade de enviar credenciais a cada vez.

Algo normalmente feito é o armazenamento do JWT em COOKIES: O servidor envia o JWT para o cliente como parte da resposta HTTP. O cliente armazena o JWT no cookie, geralmente utilizando o cabeçalho Set-Cookie na resposta do servidor.

Basicamente neste STEP Vericiamos se o COOKIE MATCHES e se o TOKEN é VALIDO para o usuario ter acesso a uma funcionalidade.

__________________________________
*******STEP BY STEP FRONTEND******
__________________________________

1° Criar VITE APP + Instalacoes: 

npm create vite@latest
Escolher TS + SWA

instalar node modules:
npm i

Instalar MUI:
npm install @mui/material @emotion/react @emotion/styled

Instalar REACT ICONS:
npm install react-icons --save

Instalar REACT ROUTER DOM:
npm i react-router-dom

Instalar REACT HOT-TOAST:
npm i react-hot-toast



RODAR PROJECT FRONT: 

npm run dev

2° Fazer limpeza pastas + files



