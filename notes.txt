Este projeto é feito utilizando a stack MERN + OPENAI, abaixo deixarei instrucoes do passo a passo GERAL para a construçao de um projeto do genero



*******STEP BY STEP BACKEND*******

RODAR: npm run dev

1° Iniciaremos com a parte BACKEND

2° Copiamos os files deste GITHUB:https://github.com/Nikhilthadani/MERN-AI-ChatBot

3° C.L modificados nos SCRIPTS
 "scripts": {
    "dev": "concurrently \"npx tsc --watch\" \"nodemon -q dist/index.js\" ",
    "build": "tsc",
    "start": "node dist/index.js"
  },

4° Mudamos o tsconfig.json :   
"compilerOptions": {
    "module": "NodeNext",

5° Criamos file dist no SERVER

6° Rodamos o comando npm run dev, pausamos e rodamos denovo

7° Criei o GIT IGNORE

8° Linkei REP LOCAL + REMOTO

9° Criamos as pastas no SRC: config, controllers, models, routes, utils e database

10° Conectamos com o MONGODB

11° Criamos conta no OPENAI e conectamos ao nosso ENV e APP

12° Iremos criar uma autenticacao segura com JWT e COOKIES , rotas do back e controllers

13° Iremos criar os MODEL SCHEMAS DO DB

14° Criamos controllers para serem designados para cuidar das rotas

15° Testamos as rotas no THUNDERBOLT

16° Criando MIDDLEWARES: Funcoes executadas ANTES de uma REQ ser executada, no NODE pode ser usado para checar o JSON BODY, TOKENS, COOKIES, PARAMS e muito mais. 

E como se fosse um BODY GUARD que so deixa entrar dps das VERIFICACOES e no caso em que nao seja atendida a verificacao ira avisar para o FRONT oque precisa pra entrar na "festa". Para isso existe uma dependency express-validator. Iremos criar esses validator dentro UTILS